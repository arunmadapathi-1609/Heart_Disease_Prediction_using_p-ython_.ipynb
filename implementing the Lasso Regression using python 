{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP0zXFyy8LG1gByQipYryhB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/arunmadapathi-1609/Heart_Disease_Prediction_using_p-ython_.ipynb/blob/main/implementing%20the%20Lasso%20Regression%20using%20python%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "fx9V2q6nCRrs"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class  Lasso_Regression:\n",
        "\n",
        "\n",
        "  def __init__(self,learning_rate,no_of_iterations, lambda_parameter):\n",
        "    self.learning_rate =learning_rate\n",
        "    self.no_of_iterations =no_of_iterations\n",
        "    self.lambda_parameter =lambda_parameter\n",
        "\n",
        "  def fit(self,x,y):\n",
        "    self.m,self.n=x.shape\n",
        "    self.w=np.zeros(self.n)\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.b=0\n",
        "\n",
        "\n",
        "\n",
        "    for i in range(self.no_of_iterations):\n",
        "      self.update_weights()\n",
        "\n",
        "\n",
        "  def update_weights(self):\n",
        "    y_prediction =self.predict(self.x)\n",
        "\n",
        "\n",
        "\n",
        "    # gradient (dw,db)\n",
        "    dw= np.zeros(self.n)\n",
        "\n",
        "    for i in range (self.n):\n",
        "      if self.w[i]>0:\n",
        "\n",
        "        dw[i] = (-(2*self.x[:,-1].dot(self.y-y_prediction))+ self.lambda_parameter)/self.m\n",
        "\n",
        "      else:\n",
        "\n",
        "         dw[i] = (-(2*self.x[:,-1].dot(self.y-y_prediction))+ self.lambda_parameter)/self.m\n",
        "\n",
        "    #gradient for the bias\n",
        "    db= -2*np.sum(self.y-y_prediction)/self.m\n",
        "\n",
        "    #updating the weights and bias\n",
        "    self.w=self.w-self.learning_rate*dw\n",
        "    self.b=self.b-self.learning_rate*db\n",
        "\n",
        "#predicting the target variables\n",
        "  def predict(self,x):\n",
        "    return x.dot(self.w) +self.b"
      ],
      "metadata": {
        "id": "S95LWKEVGhZR"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DfEvqPndHDpI"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}